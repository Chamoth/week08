name: CI — Build & Test (Backend & Frontend)

on:
  pull_request:
    branches: [ dev, main ]
  push:
    branches: [ dev, main, 'feat/**', 'fix/**' ]
    paths:
      - 'backend/**'
      - 'frontend/**'
      - '.github/workflows/**'
  workflow_dispatch: {}

permissions:
  contents: read
  id-token: write
  packages: write

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  # e.g. sit722w09acr99.azurecr.io (set in: Settings → Actions → Variables)
  ACR_LOGIN_SERVER: ${{ vars.ACR_LOGIN_SERVER }}

jobs:
  build-test-push:
    name: ${{ matrix.svc }} CI
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        svc: [ 'product_service', 'order_service', 'frontend' ]

    steps:
      - uses: actions/checkout@v4

      - name: Set service paths
        id: paths
        shell: bash
        run: |
          if [[ "${{ matrix.svc }}" == "frontend" ]]; then
            echo "dir=frontend" >> $GITHUB_OUTPUT
            echo "image=frontend" >> $GITHUB_OUTPUT
          elif [[ "${{ matrix.svc }}" == "product_service" ]]; then
            echo "dir=backend/product_service" >> $GITHUB_OUTPUT
            echo "image=product-service" >> $GITHUB_OUTPUT
          else
            echo "dir=backend/order_service" >> $GITHUB_OUTPUT
            echo "image=order-service" >> $GITHUB_OUTPUT
          fi

      - name: Cache node_modules (frontend only)
        if: matrix.svc == 'frontend'
        uses: actions/cache@v4
        with:
          path: ${{ steps.paths.outputs.dir }}/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles(format('{0}/package-lock.json', steps.paths.outputs.dir)) }}

      # Login to Azure only on dev/main (requires federated creds for Branch: dev, main)
      - name: Azure login (OIDC) — dev/main only
        if: ${{ github.ref_name == 'main' || github.ref_name == 'dev' }}
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Unit tests (if present)
        shell: bash
        run: |
          cd "${{ steps.paths.outputs.dir }}"
          if [ -f package.json ]; then
            npm ci
            npm test --if-present
          else
            echo "No JS tests for ${{ matrix.svc }}"
          fi

      # ACR login using short-lived token (no admin creds) — dev/main only
      - name: ACR login (token) — dev/main only
        if: ${{ github.ref_name == 'main' || github.ref_name == 'dev' }}
        shell: bash
        run: |
          ACR_NAME="${ACR_LOGIN_SERVER%%.azurecr.io}"
          TOKEN="$(az acr login -n "$ACR_NAME" --expose-token --query accessToken -o tsv)"
          echo "$TOKEN" | docker login "$ACR_LOGIN_SERVER" \
            -u 00000000-0000-0000-0000-000000000000 --password-stdin

      # Set up Buildx so gha cache backend works
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true
          driver-opts: image=moby/buildkit:latest

      - name: Set tags
        id: tags
        shell: bash
        run: |
          echo "sha=${GITHUB_SHA}" >> $GITHUB_OUTPUT
          echo "tags=${{ env.ACR_LOGIN_SERVER }}/${{ steps.paths.outputs.image }}:${GITHUB_SHA},${{ env.ACR_LOGIN_SERVER }}/${{ steps.paths.outputs.image }}:latest" >> $GITHUB_OUTPUT

      - name: Build & Push Docker image (push only on dev/main)
        uses: docker/build-push-action@v6
        with:
          context: ${{ steps.paths.outputs.dir }}
          push: ${{ github.ref_name == 'main' || github.ref_name == 'dev' }}
          tags: ${{ steps.tags.outputs.tags }}
          labels: |
            org.opencontainers.image.source=${{ github.event.repository.html_url }}
            org.opencontainers.image.revision=${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
